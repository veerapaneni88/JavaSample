/***************************************************************************
**
** Module File:  CLSS51D.PC
**
** DAM Name:     CLSS51D
**
** Description:  This DAM will select full rows from LEGAL_STATUS where
**		 ID_PERSON is equal to the host
**
** Environment:  HP-UX v9.04
**               FOUNDATION 2.4 for Unix (Construction, Production)
**               HP-UX Ansi C Compiler
**               ORACLE Pro*C SQL PreCompiler
**
** Date Created: Mon Nov 13 16:24:20 1995
**
** Programmer:   Jeff Hughes
**
** Archive Information: $Revision:   1.0  $
**                      $Date:   27 May 1996 20:30:30  $
**                      $Modtime:   29 Mar 1996 23:18:48  $
**                      $Author:   pvcs  $
**
** Change History:
**  Date      User      Description
**  --------  --------  --------------------------------------------------
**  06/11/06  douglacs  SIR 24329 - increase legal status cause # from 10 to 40
***************************************************************************/

/**************************************************************************
** Include Files
***************************************************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <float.h>
#include <kglhk020.h>
#include <kcdak010.h>
#include "arcsrvr.h"

#include "clss51di.h"
#include "clss51do.h"

EXEC SQL INCLUDE sqlca.h;

/*************************************************************************
*
*          Function:        clss51dQUERYdam
*
*
*              File:        CLSS51D.PC
*
*
*        Generation:        Mon Nov 13 16:24:20 1995
*
*************************************************************************/
long  clss51dQUERYdam(void *pSQLCA,
                          _CLSS51DI *pInputDataRec,
                          _CLSS51DO *pOutputDataRec)
{

EXEC SQL BEGIN DECLARE SECTION;
unsigned long hI_ulIdPerson;
short hI_ulIdPerson_i;

unsigned long hO_ulIdLegalStatEvent[100];
short hO_ulIdLegalStatEvent_i[100];
char hO_tsLastUpdate[100][7];
EXEC SQL VAR hO_tsLastUpdate IS DATE;
short hO_tsLastUpdate_i[100];
unsigned long hO_ulIdPerson[100];
short hO_ulIdPerson_i[100];
char hO_szCdLegalStatCnty[100][4];
EXEC SQL VAR hO_szCdLegalStatCnty IS STRING;
short hO_szCdLegalStatCnty_i[100];
char hO_szCdLegalStatStatus[100][4];
EXEC SQL VAR hO_szCdLegalStatStatus IS STRING;
short hO_szCdLegalStatStatus_i[100];
char hO_dtDtLegalStatStatusDt[100][7];
EXEC SQL VAR hO_dtDtLegalStatStatusDt IS DATE;
short hO_dtDtLegalStatStatusDt_i[100];
char hO_szTxtLegalStatCauseNbr[100][41];
EXEC SQL VAR hO_szTxtLegalStatCauseNbr IS STRING;
short hO_szTxtLegalStatCauseNbr_i[100];
char hO_szTxtLegalStatCourtNbr[100][11];
EXEC SQL VAR hO_szTxtLegalStatCourtNbr IS STRING;
short hO_szTxtLegalStatCourtNbr_i[100];
EXEC SQL END DECLARE SECTION;

long BegPageRow = 0, EndPageRow = 0, i = 0;
long lTotal = 0, lOutputIndex = 0, lHostIndex = 0;
unsigned short uStatus;
struct sqlca previousSQLCA;
sqlca.sqlcode = 0;

uStatus=ARC_UTLNumberToHost(&hI_ulIdPerson,
             &(pInputDataRec->ulIdPerson),
             sizeof(pInputDataRec->ulIdPerson),
             &hI_ulIdPerson_i);
if (uStatus != 0)
{
    return (uStatus);
}




EXEC SQL
	DECLARE CLSS51D_CURSOR CURSOR FOR
	SELECT
		LS.ID_LEGAL_STAT_EVENT,
		LS.DT_LAST_UPDATE,
		LS.ID_PERSON,
		LS.CD_LEGAL_STAT_CNTY,
		LS.CD_LEGAL_STAT_STATUS,
		LS.DT_LEGAL_STAT_STATUS_DT,
		LS.TXT_LEGAL_STAT_CAUSE_NBR,
		LS.TXT_LEGAL_STAT_COURT_NBR
	FROM	LEGAL_STATUS LS
	WHERE	ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i;


/*****************************/
/* Total selected fields: 8 */
/*****************************/

EXEC SQL
	OPEN CLSS51D_CURSOR;


if ( sqlca.sqlcode != 0 )
{
	memcpy(pSQLCA, (void *)&sqlca, sizeof(struct sqlca));
	return sqlca.sqlcode;
}

EndPageRow = pInputDataRec->ArchInputStruct.usPageNbr *
             pInputDataRec->ArchInputStruct.ulPageSizeNbr;
BegPageRow = ((pInputDataRec->ArchInputStruct.usPageNbr - 1) *
               pInputDataRec->ArchInputStruct.ulPageSizeNbr);

if (BegPageRow < 0)
{
    return (ARC_ERR_BAD_PAGE_NUMBER);
} /* end if */


while ( (lTotal <= EndPageRow) && (sqlca.sqlcode == 0) )
{
        memcpy (&previousSQLCA, (void *)&sqlca, sizeof(struct sqlca));


EXEC SQL
	FETCH CLSS51D_CURSOR INTO
		:hO_ulIdLegalStatEvent:hO_ulIdLegalStatEvent_i,
		:hO_tsLastUpdate:hO_tsLastUpdate_i,
		:hO_ulIdPerson:hO_ulIdPerson_i,
		:hO_szCdLegalStatCnty:hO_szCdLegalStatCnty_i,
		:hO_szCdLegalStatStatus:hO_szCdLegalStatStatus_i,
		:hO_dtDtLegalStatStatusDt:hO_dtDtLegalStatStatusDt_i,
		:hO_szTxtLegalStatCauseNbr:hO_szTxtLegalStatCauseNbr_i,
		:hO_szTxtLegalStatCourtNbr:hO_szTxtLegalStatCourtNbr_i;

/**************************/
/* Total fetch fields: 8 */
/**************************/


        /* Get cumulative rows fetched with cursor */
        lTotal = sqlca.sqlerrd[2];
        if (lTotal > BegPageRow)
        {
            if (BegPageRow > i)
            {
                lHostIndex = BegPageRow - i;
                i = BegPageRow;
            }
            else
            {
                lHostIndex = 0;
            }

            while ( (i < lTotal) && (i < EndPageRow))
            {
                     uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].ulIdLegalStatEvent),
                                          &hO_ulIdLegalStatEvent[lHostIndex],
                                          sizeof(hO_ulIdLegalStatEvent[lHostIndex]),
                                          hO_ulIdLegalStatEvent_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToTimestamp(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].tsLastUpdate,
                                          hO_tsLastUpdate[lHostIndex],
                                          hO_tsLastUpdate_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].ulIdPerson),
                                          &hO_ulIdPerson[lHostIndex],
                                          sizeof(hO_ulIdPerson[lHostIndex]),
                                          hO_ulIdPerson_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToString(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].szCdLegalStatCnty,
                                          hO_szCdLegalStatCnty[lHostIndex],
                                          4,
                                          hO_szCdLegalStatCnty_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToString(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].szCdLegalStatStatus,
                                          hO_szCdLegalStatStatus[lHostIndex],
                                          4,
                                          hO_szCdLegalStatStatus_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].dtDtLegalStatStatusDt),
                                          pOutputDataRec->ROWCLSS51DO[lOutputIndex].tmScrTmGeneric1,
                                          hO_dtDtLegalStatStatusDt[lHostIndex],
                                          hO_dtDtLegalStatStatusDt_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToString(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].szTxtLegalStatCauseNbr,
                                          hO_szTxtLegalStatCauseNbr[lHostIndex],
                                          41,
                                          hO_szTxtLegalStatCauseNbr_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }

                     uStatus=ARC_UTLHostToString(pOutputDataRec->ROWCLSS51DO[i - BegPageRow].szTxtLegalStatCourtNbr,
                                          hO_szTxtLegalStatCourtNbr[lHostIndex],
                                          11,
                                          hO_szTxtLegalStatCourtNbr_i[lHostIndex]);
                     if (uStatus != 0)
                     {
                         return (uStatus);
                     }


                i++;
                lHostIndex++;
                lOutputIndex++;
            } /* end while */
        }
	else
	{
            i = lTotal;
	}
}


if (i < BegPageRow)
{
    i = BegPageRow;
}

pOutputDataRec->ArchOutputStruct.ulRowQty = i - BegPageRow;

if (pOutputDataRec->ArchOutputStruct.ulRowQty == 0)
{
    memcpy (&previousSQLCA, &sqlca,  sizeof (struct sqlca));
}

if (lTotal > EndPageRow)
{
    pOutputDataRec->ArchOutputStruct.bMoreDataInd = TRUE;
}

else
{
    pOutputDataRec->ArchOutputStruct.bMoreDataInd = FALSE;
}



EXEC SQL
	CLOSE CLSS51D_CURSOR;


memcpy (pSQLCA, &previousSQLCA, sizeof(struct sqlca));
return (((struct sqlca *)pSQLCA)->sqlcode);
}
