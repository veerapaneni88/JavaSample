/***************************************************************************
**
** Module File:  CSEC01D.PC
**
** DAM Name:     CSEC01D
**
** Description:  Retrieves active primary address, phone number, and name for an
**               employee
**
** Environment:  HP-UX 11i v3
**               HP-UX ANSI / C Compiler
**               ORACLE Pro*C/C++ SQL PreCompiler : Release 11.2.0.1.0
**
** Date Created: Mon Jan 29 10:17:40 1996
**
** Programmer:   BUIMD/Tony Heard
**
** Archive Information: $Revision:   1.2.1.1  $
**                      $Date:   23 Aug 1997 16:20:06  $
**                      $Modtime:   23 Aug 1997 11:33:28  $
**                      $Author:   pvcs  $
**
** Change History:
**  Date      User      Description
**  --------  --------  --------------------------------------------------
**  12/12/96  lydd      Name, person full enhancement: adding an additional
**                      And clause N.DT_NAME_END_DATE=TO_DATE('12/31/4712',
**                                 'MM/DD/YYYY') and removing AND clause
**                      N.IND_NAME_INVALID(+) = 'N'.
**
**  02/21/97  lydd      sir 12094 - worker's most current name is not on family **                      service plan.  Change PP.DT_PERSON_PHONE_END TO N.DT_NAM**                      E_END_DATE=TO_DATE('12/31/4712','MM/DD/YYYY').
**
**  08/27/97  grierd    sir 13749 - worker's most recent phone number should
**                      also appear. Renetered line that Dan Ly removed
**                      with SIR 12094.
**  03/20/12  thompswa  SIR 1004920 size of szCdEmployeeClass, szCdJobClass to 17.
**  06/25/12            Add szTxtEmployeeClass, szCdJobClassDecode.
**  08/28/12  thompswa  SIR 1010947 Due to the EMP_JOB_HISTORY - CEMPJBCL join
**                      and messy data, move to the EJH virtual table, 
**                       
**             			(SELECT IND_JOB_ASSIGNABLE,
**             			        CD_JOB_FUNCTION,
**             			        CD_JOB_BJN,
**             			        DT_JOB_END,
**             			        DT_JOB_START,
**             			        CD_JOB_CLASS,
**             			        ID_PERSON,
**             			        ID_JOB_PERS_SUPV,
**             			        C.DECODE AS TXT_JOB_DESCR
**             			   FROM EMP_JOB_HISTORY , CEMPJBCL C
**             			  WHERE CD_JOB_CLASS = C.CODE
**             			    AND ID_EMP_JOB_HISTORY = (
**             			 SELECT MAX(EJH1.ID_EMP_JOB_HISTORY) 
**             			   FROM EMP_JOB_HISTORY EJH1
**                        WHERE EJH1.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i                
**             			    AND EJH1.DT_JOB_END = (
**             			 SELECT MAX(EJH2.DT_JOB_END)
**             			   FROM EMP_JOB_HISTORY EJH2
**                        WHERE EJH2.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i))) EJH
**                      
**                      Also move the PERSON_PHONE table to virtual table PP.
**
**             			(SELECT ID_PERSON,  
**             			        ID_PERSON_PHONE,
**             			        TXT_PERSON_PHONE_COMMENTS,
**             			        NBR_PERSON_PHONE_EXTENSION,
**             			        NBR_PERSON_PHONE,
**             			        DT_PERSON_PHONE_START,
**             			        DT_PERSON_PHONE_END,
**             			        IND_PERSON_PHONE_INVALID,
**             			        IND_PERSON_PHONE_PRIMARY,
**             			        CD_PERSON_PHONE_TYPE
**             			   FROM PERSON_PHONE 
**             			  WHERE ID_PERSON_PHONE = (
**             			 SELECT MAX(PP2.ID_PERSON_PHONE)
**             			   FROM PERSON_PHONE PP2
**             			  WHERE PP2.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i
**             			    AND PP2.IND_PERSON_PHONE_PRIMARY = 'Y'
**             			    AND PP2.DT_PERSON_PHONE_END =  (
**  					 SELECT MAX(PP3.DT_PERSON_PHONE_END)
**  					   FROM PERSON_PHONE PP3
**  					  WHERE PP3.IND_PERSON_PHONE_PRIMARY = 'Y'
**  					    AND PP3.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i))) PP
**
**                      FIRST_ROWS hint solves the Merge Join Cartesian,
**                      which works when also using the virtual tables.
**                      Also add forcing of 'ROWNUM = 1' single row return.
***************************************************************************/

/**************************************************************************
** Include Files
***************************************************************************/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <float.h>
#include <kglhk020.h>
#include <kcdak010.h>
#include "arcsrvr.h"

#include "csec01di.h"
#include "csec01do.h"

EXEC SQL INCLUDE sqlca.h;

/*************************************************************************
*
*          Function:        csec01dQUERYdam
*
*
*              File:        CSEC01D.PC
*
*
*        Generation:        Mon Jan 29 10:17:40 1996
*
*************************************************************************/
long  csec01dQUERYdam(void *pSQLCA,
                          _CSEC01DI *pInputDataRec,
                          _CSEC01DO *pOutputDataRec)
{

EXEC SQL BEGIN DECLARE SECTION;
unsigned long hI_ulIdPerson;
short hI_ulIdPerson_i;

unsigned long hO_ulIdPerson;
short hO_ulIdPerson_i;
unsigned short hO_lNbrEmpActivePct;
short hO_lNbrEmpActivePct_i;
char hO_dtDtEmpHire[7];
EXEC SQL VAR hO_dtDtEmpHire IS DATE;
short hO_dtDtEmpHire_i;
unsigned long hO_ulIdEmpJobHistory;
short hO_ulIdEmpJobHistory_i;
char hO_szIdEmployeeLogon[9];
EXEC SQL VAR hO_szIdEmployeeLogon IS STRING;
short hO_szIdEmployeeLogon_i;

char hO_szCdEmployeeClass[17];
EXEC SQL VAR hO_szCdEmployeeClass IS STRING;
short hO_szCdEmployeeClass_i;

char hO_szTxtEmployeeClass[72];
EXEC SQL VAR hO_szTxtEmployeeClass IS STRING;
short hO_szTxtEmployeeClass_i;//SIR 1004920

char hO_szCdEmpSecurityClassNm[16];
EXEC SQL VAR hO_szCdEmpSecurityClassNm IS STRING;
short hO_szCdEmpSecurityClassNm_i;
unsigned long hO_ulIdOffice;
short hO_ulIdOffice_i;
char hO_dtDtEmpLastAssigned[7];
EXEC SQL VAR hO_dtDtEmpLastAssigned IS DATE;
short hO_dtDtEmpLastAssigned_i;
char hO_szCdEmpProgram[4];
EXEC SQL VAR hO_szCdEmpProgram IS STRING;
short hO_szCdEmpProgram_i;
char hO_bIndEmpConfirmedHrmis;
EXEC SQL VAR hO_bIndEmpConfirmedHrmis IS CHAR(1);
short hO_bIndEmpConfirmedHrmis_i;
char hO_bIndEmpPendingHrmis;
EXEC SQL VAR hO_bIndEmpPendingHrmis IS CHAR(1);
short hO_bIndEmpPendingHrmis_i;
char hO_bIndActiveStatus;
EXEC SQL VAR hO_bIndActiveStatus IS CHAR(1);
short hO_bIndActiveStatus_i;
char hO_dtDtEmpTermination[7];
EXEC SQL VAR hO_dtDtEmpTermination IS DATE;
short hO_dtDtEmpTermination_i;
unsigned long hO_ulIdJobPersSupv;
short hO_ulIdJobPersSupv_i;

char hO_szCdJobClass[17];
EXEC SQL VAR hO_szCdJobClass IS STRING;
short hO_szCdJobClass_i;

char hO_szCdJobClassDecode[72];
EXEC SQL VAR hO_szCdJobClassDecode IS STRING;
short hO_szCdJobClassDecode_i;//SIR 1004920

char hO_bIndJobAssignable;
EXEC SQL VAR hO_bIndJobAssignable IS CHAR(1);
short hO_bIndJobAssignable_i;
char hO_szCdJobFunction[4];
EXEC SQL VAR hO_szCdJobFunction IS STRING;
short hO_szCdJobFunction_i;
char hO_szBjnJob[9];
EXEC SQL VAR hO_szBjnJob IS STRING;
short hO_szBjnJob_i;
char hO_dtDtJobEnd[7];
EXEC SQL VAR hO_dtDtJobEnd IS DATE;
short hO_dtDtJobEnd_i;
char hO_dtDtJobStart[7];
EXEC SQL VAR hO_dtDtJobStart IS DATE;
short hO_dtDtJobStart_i;
char hO_szAddrMailCode[5];
EXEC SQL VAR hO_szAddrMailCode IS STRING;
short hO_szAddrMailCode_i;
char hO_szCdOfficeProgram[4];
EXEC SQL VAR hO_szCdOfficeProgram IS STRING;
short hO_szCdOfficeProgram_i;
char hO_szCdOfficeRegion[4];
EXEC SQL VAR hO_szCdOfficeRegion IS STRING;
short hO_szCdOfficeRegion_i;
char hO_szNmOfficeName[16];
EXEC SQL VAR hO_szNmOfficeName IS STRING;
short hO_szNmOfficeName_i;
char hO_szNbrMailCodePhone[11];
EXEC SQL VAR hO_szNbrMailCodePhone IS STRING;
short hO_szNbrMailCodePhone_i;
char hO_szNbrMailCodePhoneExt[9];
EXEC SQL VAR hO_szNbrMailCodePhoneExt IS STRING;
short hO_szNbrMailCodePhoneExt_i;
char hO_szAddrMailCodeStLn1[31];
EXEC SQL VAR hO_szAddrMailCodeStLn1 IS STRING;
short hO_szAddrMailCodeStLn1_i;
char hO_szAddrMailCodeStLn2[31];
EXEC SQL VAR hO_szAddrMailCodeStLn2 IS STRING;
short hO_szAddrMailCodeStLn2_i;
char hO_szAddrMailCodeCity[21];
EXEC SQL VAR hO_szAddrMailCodeCity IS STRING;
short hO_szAddrMailCodeCity_i;
char hO_szAddrMailCodeZip[11];
EXEC SQL VAR hO_szAddrMailCodeZip IS STRING;
short hO_szAddrMailCodeZip_i;
char hO_szAddrMailCodeCounty[4];
EXEC SQL VAR hO_szAddrMailCodeCounty IS STRING;
short hO_szAddrMailCodeCounty_i;
char hO_bIndMailCodeInvalid;
EXEC SQL VAR hO_bIndMailCodeInvalid IS CHAR(1);
short hO_bIndMailCodeInvalid_i;
unsigned long hO_ulIdPhone;
short hO_ulIdPhone_i;
char hO_szTxtPhoneComments[301];
EXEC SQL VAR hO_szTxtPhoneComments IS STRING;
short hO_szTxtPhoneComments_i;
char hO_lNbrPhoneExtension[9];
EXEC SQL VAR hO_lNbrPhoneExtension IS STRING;
short hO_lNbrPhoneExtension_i;
char hO_lNbrPhone[11];
EXEC SQL VAR hO_lNbrPhone IS STRING;
short hO_lNbrPhone_i;
char hO_dtDtPersonPhoneStart[7];
EXEC SQL VAR hO_dtDtPersonPhoneStart IS DATE;
short hO_dtDtPersonPhoneStart_i;
char hO_dtDtPersonPhoneEnd[7];
EXEC SQL VAR hO_dtDtPersonPhoneEnd IS DATE;
short hO_dtDtPersonPhoneEnd_i;
char hO_bIndPersonPhoneInvalid;
EXEC SQL VAR hO_bIndPersonPhoneInvalid IS CHAR(1);
short hO_bIndPersonPhoneInvalid_i;
char hO_bIndPersonPhonePrimary;
EXEC SQL VAR hO_bIndPersonPhonePrimary IS CHAR(1);
short hO_bIndPersonPhonePrimary_i;
char hO_szCdPhoneType[3];
EXEC SQL VAR hO_szCdPhoneType IS STRING;
short hO_szCdPhoneType_i;
unsigned long hO_ulIdName;
short hO_ulIdName_i;
char hO_bIndNameInvalid;
EXEC SQL VAR hO_bIndNameInvalid IS CHAR(1);
short hO_bIndNameInvalid_i;
char hO_szNmNameFirst[13];
EXEC SQL VAR hO_szNmNameFirst IS STRING;
short hO_szNmNameFirst_i;
char hO_szNmNameMiddle[13];
EXEC SQL VAR hO_szNmNameMiddle IS STRING;
short hO_szNmNameMiddle_i;
char hO_szNmNameLast[23];
EXEC SQL VAR hO_szNmNameLast IS STRING;
short hO_szNmNameLast_i;
char hO_bIndNamePrimary;
EXEC SQL VAR hO_bIndNamePrimary IS CHAR(1);
short hO_bIndNamePrimary_i;
char hO_szCdNameSuffix[3];
EXEC SQL VAR hO_szCdNameSuffix IS STRING;
short hO_szCdNameSuffix_i;
char hO_dtDtNameStartDate[7];
EXEC SQL VAR hO_dtDtNameStartDate IS DATE;
short hO_dtDtNameStartDate_i;
char hO_dtDtNameEndDate[7];
EXEC SQL VAR hO_dtDtNameEndDate IS DATE;
short hO_dtDtNameEndDate_i;
EXEC SQL END DECLARE SECTION;

long BegPageRow = 0, EndPageRow = 0, i = 0;
long lTotal = 0, lOutputIndex = 0, lHostIndex = 0;
unsigned short uStatus;
struct sqlca previousSQLCA;
sqlca.sqlcode = 0;

uStatus=ARC_UTLNumberToHost(&hI_ulIdPerson,
             &(pInputDataRec->ulIdPerson),
             sizeof(pInputDataRec->ulIdPerson),
             &hI_ulIdPerson_i);
if (uStatus != 0)
{
    return (uStatus);
}




EXEC SQL
DECLARE CSEC01D_CURSOR CURSOR FOR
         SELECT * FROM (          
         SELECT /*+ FIRST_ROWS */ 
                E.ID_PERSON,
                E.NBR_EMP_ACTIVE_PCT,
                E.DT_EMP_HIRE,
                E.ID_EMP_JOB_HISTORY,
                E.ID_EMPLOYEE_LOGON,
                E.CD_EMPLOYEE_CLASS,
                E.TXT_EMPLOYEE_CLASS,
                E.CD_EMP_SECURITY_CLASS_NM,
                E.ID_EMP_OFFICE,
                E.DT_EMP_LAST_ASSIGNED,
                E.CD_EMP_PROGRAM,
                E.IND_EMP_CONFIRMED_HRMIS,
                E.IND_EMP_PENDING_HRMIS,
                E.IND_EMP_ACTIVE_STATUS,
                E.DT_EMP_TERMINATION,
                EJH.ID_JOB_PERS_SUPV,
                EJH.CD_JOB_CLASS,
                EJH.TXT_JOB_DESCR,
                EJH.IND_JOB_ASSIGNABLE,
                EJH.CD_JOB_FUNCTION,
                EJH.CD_JOB_BJN,
                EJH.DT_JOB_END,
                EJH.DT_JOB_START,
                O.CD_OFFICE_MAIL,
                O.CD_OFFICE_PROGRAM,
                O.CD_OFFICE_REGION,
                O.NM_OFFICE_NAME,
                MC.NBR_MAIL_CODE_PHONE,
                MC.NBR_MAIL_CODE_PHONE_EXT,
                MC.ADDR_MAIL_CODE_ST_LN_1,
                MC.ADDR_MAIL_CODE_ST_LN_2,
                MC.ADDR_MAIL_CODE_CITY,
                MC.ADDR_MAIL_CODE_ZIP,
                MC.ADDR_MAIL_CODE_COUNTY,
                MC.IND_MAIL_CODE_INVALID,
                PP.ID_PERSON_PHONE,
                PP.TXT_PERSON_PHONE_COMMENTS,
                PP.NBR_PERSON_PHONE_EXTENSION,
                PP.NBR_PERSON_PHONE,
                PP.DT_PERSON_PHONE_START,
                PP.DT_PERSON_PHONE_END,
                PP.IND_PERSON_PHONE_INVALID,
                PP.IND_PERSON_PHONE_PRIMARY,
                PP.CD_PERSON_PHONE_TYPE,
                N.ID_NAME,
                N.IND_NAME_INVALID,
                N.NM_NAME_FIRST,
                N.NM_NAME_MIDDLE,
                N.NM_NAME_LAST,
                N.IND_NAME_PRIMARY,
                N.CD_NAME_SUFFIX,
                N.DT_NAME_START_DATE,
                N.DT_NAME_END_DATE
           FROM NAME N,
               (SELECT ID_PERSON,  
                       ID_PERSON_PHONE,
                       TXT_PERSON_PHONE_COMMENTS,
                       NBR_PERSON_PHONE_EXTENSION,
                       NBR_PERSON_PHONE,
                       DT_PERSON_PHONE_START,
                       DT_PERSON_PHONE_END,
                       IND_PERSON_PHONE_INVALID,
                       IND_PERSON_PHONE_PRIMARY,
                       CD_PERSON_PHONE_TYPE
                  FROM PERSON_PHONE 
                 WHERE ID_PERSON_PHONE = (
                SELECT MAX(PP2.ID_PERSON_PHONE)
                  FROM PERSON_PHONE PP2
                 WHERE PP2.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i
                   AND PP2.IND_PERSON_PHONE_PRIMARY = 'Y'
                   AND PP2.DT_PERSON_PHONE_END =  (
                SELECT MAX(PP3.DT_PERSON_PHONE_END)
                  FROM PERSON_PHONE PP3
                 WHERE PP3.IND_PERSON_PHONE_PRIMARY = 'Y'
                   AND PP3.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i))) PP,
                MAIL_CODE MC,
                OFFICE O,
               (SELECT IND_JOB_ASSIGNABLE,
                       CD_JOB_FUNCTION,
                       CD_JOB_BJN,
                       DT_JOB_END,
                       DT_JOB_START,
                       CD_JOB_CLASS,
                       ID_PERSON,
                       ID_JOB_PERS_SUPV,
                       C.DECODE AS TXT_JOB_DESCR
                  FROM EMP_JOB_HISTORY , CEMPJBCL C
                 WHERE CD_JOB_CLASS = C.CODE
                   AND ID_EMP_JOB_HISTORY = (
                SELECT MAX(EJH1.ID_EMP_JOB_HISTORY) 
                  FROM EMP_JOB_HISTORY EJH1
                 WHERE EJH1.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i
                   AND EJH1.DT_JOB_END = (
                SELECT MAX(EJH2.DT_JOB_END)
                  FROM EMP_JOB_HISTORY EJH2
                 WHERE EJH2.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i))) EJH,          
                EMPLOYEE E
          WHERE E.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i
            AND E.ID_PERSON = N.ID_PERSON (+)
            AND N.IND_NAME_PRIMARY (+) = 'Y'
            AND N.DT_NAME_END_DATE (+) = TO_DATE('12/31/4712', 'MM/DD/YYYY')
            AND E.ID_PERSON = PP.ID_PERSON (+)
            AND E.ID_PERSON = EJH.ID_PERSON (+)
            AND E.ID_EMP_OFFICE = O.ID_OFFICE (+)
            AND O.CD_OFFICE_MAIL = MC.CD_MAIL_CODE (+))
          WHERE ROWNUM = 1;

EXEC SQL
 OPEN CSEC01D_CURSOR;


if ( sqlca.sqlcode != 0 )
{
 memcpy(pSQLCA, (void *)&sqlca, sizeof(struct sqlca));
 return sqlca.sqlcode;
}


EXEC SQL
 FETCH CSEC01D_CURSOR INTO
  :hO_ulIdPerson:hO_ulIdPerson_i,
  :hO_lNbrEmpActivePct:hO_lNbrEmpActivePct_i,
  :hO_dtDtEmpHire:hO_dtDtEmpHire_i,
  :hO_ulIdEmpJobHistory:hO_ulIdEmpJobHistory_i,
  :hO_szIdEmployeeLogon:hO_szIdEmployeeLogon_i,
  :hO_szCdEmployeeClass:hO_szCdEmployeeClass_i,
  :hO_szTxtEmployeeClass:hO_szTxtEmployeeClass_i,
  :hO_szCdEmpSecurityClassNm:hO_szCdEmpSecurityClassNm_i,
  :hO_ulIdOffice:hO_ulIdOffice_i,
  :hO_dtDtEmpLastAssigned:hO_dtDtEmpLastAssigned_i,
  :hO_szCdEmpProgram:hO_szCdEmpProgram_i,
  :hO_bIndEmpConfirmedHrmis:hO_bIndEmpConfirmedHrmis_i,
  :hO_bIndEmpPendingHrmis:hO_bIndEmpPendingHrmis_i,
  :hO_bIndActiveStatus:hO_bIndActiveStatus_i,
  :hO_dtDtEmpTermination:hO_dtDtEmpTermination_i,
  :hO_ulIdJobPersSupv:hO_ulIdJobPersSupv_i,
  :hO_szCdJobClass:hO_szCdJobClass_i,
  :hO_szCdJobClassDecode:hO_szCdJobClassDecode_i,
  :hO_bIndJobAssignable:hO_bIndJobAssignable_i,
  :hO_szCdJobFunction:hO_szCdJobFunction_i,
  :hO_szBjnJob:hO_szBjnJob_i,
  :hO_dtDtJobEnd:hO_dtDtJobEnd_i,
  :hO_dtDtJobStart:hO_dtDtJobStart_i,
  :hO_szAddrMailCode:hO_szAddrMailCode_i,
  :hO_szCdOfficeProgram:hO_szCdOfficeProgram_i,
  :hO_szCdOfficeRegion:hO_szCdOfficeRegion_i,
  :hO_szNmOfficeName:hO_szNmOfficeName_i,
  :hO_szNbrMailCodePhone:hO_szNbrMailCodePhone_i,
  :hO_szNbrMailCodePhoneExt:hO_szNbrMailCodePhoneExt_i,
  :hO_szAddrMailCodeStLn1:hO_szAddrMailCodeStLn1_i,
  :hO_szAddrMailCodeStLn2:hO_szAddrMailCodeStLn2_i,
  :hO_szAddrMailCodeCity:hO_szAddrMailCodeCity_i,
  :hO_szAddrMailCodeZip:hO_szAddrMailCodeZip_i,
  :hO_szAddrMailCodeCounty:hO_szAddrMailCodeCounty_i,
  :hO_bIndMailCodeInvalid:hO_bIndMailCodeInvalid_i,
  :hO_ulIdPhone:hO_ulIdPhone_i,
  :hO_szTxtPhoneComments:hO_szTxtPhoneComments_i,
  :hO_lNbrPhoneExtension:hO_lNbrPhoneExtension_i,
  :hO_lNbrPhone:hO_lNbrPhone_i,
  :hO_dtDtPersonPhoneStart:hO_dtDtPersonPhoneStart_i,
  :hO_dtDtPersonPhoneEnd:hO_dtDtPersonPhoneEnd_i,
  :hO_bIndPersonPhoneInvalid:hO_bIndPersonPhoneInvalid_i,
  :hO_bIndPersonPhonePrimary:hO_bIndPersonPhonePrimary_i,
  :hO_szCdPhoneType:hO_szCdPhoneType_i,
  :hO_ulIdName:hO_ulIdName_i,
  :hO_bIndNameInvalid:hO_bIndNameInvalid_i,
  :hO_szNmNameFirst:hO_szNmNameFirst_i,
  :hO_szNmNameMiddle:hO_szNmNameMiddle_i,
  :hO_szNmNameLast:hO_szNmNameLast_i,
  :hO_bIndNamePrimary:hO_bIndNamePrimary_i,
  :hO_szCdNameSuffix:hO_szCdNameSuffix_i,
  :hO_dtDtNameStartDate:hO_dtDtNameStartDate_i,
  :hO_dtDtNameEndDate:hO_dtDtNameEndDate_i;

/**************************/
/* Total fetch fields: 53 */
/**************************/


memcpy (&previousSQLCA, &sqlca, sizeof (struct sqlca));

if ( sqlca.sqlcode == 0 )
{
             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdPerson),
                          &hO_ulIdPerson,
                          sizeof(hO_ulIdPerson),
                          hO_ulIdPerson_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->lNbrEmpActivePct),
                          &hO_lNbrEmpActivePct,
                          sizeof(hO_lNbrEmpActivePct),
                          hO_lNbrEmpActivePct_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtEmpHire),
                          pOutputDataRec->tmScrTmGeneric1,
                          hO_dtDtEmpHire,
                          hO_dtDtEmpHire_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdEmpJobHistory),
                          &hO_ulIdEmpJobHistory,
                          sizeof(hO_ulIdEmpJobHistory),
                          hO_ulIdEmpJobHistory_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szIdEmployeeLogon,
                          hO_szIdEmployeeLogon,
                          9,
                          hO_szIdEmployeeLogon_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdEmployeeClass,
                          hO_szCdEmployeeClass,
                          CD_EMPLOYEE_CLASS_LEN,
                          hO_szCdEmployeeClass_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szTxtEmployeeClass,
                          hO_szTxtEmployeeClass,
                          TXT_EMPLOYEE_CLASS_LEN,
                          hO_szTxtEmployeeClass_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdEmpSecurityClassNm,
                          hO_szCdEmpSecurityClassNm,
                          16,
                          hO_szCdEmpSecurityClassNm_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdOffice),
                          &hO_ulIdOffice,
                          sizeof(hO_ulIdOffice),
                          hO_ulIdOffice_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtEmpLastAssigned),
                          pOutputDataRec->tmScrTmGeneric7,
                          hO_dtDtEmpLastAssigned,
                          hO_dtDtEmpLastAssigned_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdEmpProgram,
                          hO_szCdEmpProgram,
                          4,
                          hO_szCdEmpProgram_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndEmpConfirmedHrmis),
                          &hO_bIndEmpConfirmedHrmis,
                          sizeof(hO_bIndEmpConfirmedHrmis),
                          hO_bIndEmpConfirmedHrmis_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndEmpPendingHrmis),
                          &hO_bIndEmpPendingHrmis,
                          sizeof(hO_bIndEmpPendingHrmis),
                          hO_bIndEmpPendingHrmis_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndActiveStatus),
                          &hO_bIndActiveStatus,
                          sizeof(hO_bIndActiveStatus),
                          hO_bIndActiveStatus_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtEmpTermination),
                          pOutputDataRec->tmScrTmGeneric2,
                          hO_dtDtEmpTermination,
                          hO_dtDtEmpTermination_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdJobPersSupv),
                          &hO_ulIdJobPersSupv,
                          sizeof(hO_ulIdJobPersSupv),
                          hO_ulIdJobPersSupv_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdJobClass,
                          hO_szCdJobClass,
                          CD_JOB_CLASS_LEN,
                          hO_szCdJobClass_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdJobClassDecode,
                          hO_szCdJobClassDecode,
                          CD_JOB_CLASS_DECODE_LEN,
                          hO_szCdJobClassDecode_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndJobAssignable),
                          &hO_bIndJobAssignable,
                          sizeof(hO_bIndJobAssignable),
                          hO_bIndJobAssignable_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdJobFunction,
                          hO_szCdJobFunction,
                          4,
                          hO_szCdJobFunction_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szBjnJob,
                          hO_szBjnJob,
                          9,
                          hO_szBjnJob_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtJobEnd),
                          pOutputDataRec->tmScrTmGeneric5,
                          hO_dtDtJobEnd,
                          hO_dtDtJobEnd_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtJobStart),
                          pOutputDataRec->tmScrTmGeneric6,
                          hO_dtDtJobStart,
                          hO_dtDtJobStart_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCode,
                          hO_szAddrMailCode,
                          5,
                          hO_szAddrMailCode_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdOfficeProgram,
                          hO_szCdOfficeProgram,
                          4,
                          hO_szCdOfficeProgram_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdOfficeRegion,
                          hO_szCdOfficeRegion,
                          4,
                          hO_szCdOfficeRegion_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNmOfficeName,
                          hO_szNmOfficeName,
                          16,
                          hO_szNmOfficeName_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNbrMailCodePhone,
                          hO_szNbrMailCodePhone,
                          11,
                          hO_szNbrMailCodePhone_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNbrMailCodePhoneExt,
                          hO_szNbrMailCodePhoneExt,
                          9,
                          hO_szNbrMailCodePhoneExt_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCodeStLn1,
                          hO_szAddrMailCodeStLn1,
                          31,
                          hO_szAddrMailCodeStLn1_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCodeStLn2,
                          hO_szAddrMailCodeStLn2,
                          31,
                          hO_szAddrMailCodeStLn2_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCodeCity,
                          hO_szAddrMailCodeCity,
                          21,
                          hO_szAddrMailCodeCity_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCodeZip,
                          hO_szAddrMailCodeZip,
                          11,
                          hO_szAddrMailCodeZip_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szAddrMailCodeCounty,
                          hO_szAddrMailCodeCounty,
                          4,
                          hO_szAddrMailCodeCounty_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndMailCodeInvalid),
                          &hO_bIndMailCodeInvalid,
                          sizeof(hO_bIndMailCodeInvalid),
                          hO_bIndMailCodeInvalid_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdPhone),
                          &hO_ulIdPhone,
                          sizeof(hO_ulIdPhone),
                          hO_ulIdPhone_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szTxtPhoneComments,
                          hO_szTxtPhoneComments,
                          301,
                          hO_szTxtPhoneComments_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->lNbrPhoneExtension,
                          hO_lNbrPhoneExtension,
                          9,
                          hO_lNbrPhoneExtension_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->lNbrPhone,
                          hO_lNbrPhone,
                          11,
                          hO_lNbrPhone_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtPersonPhoneStart),
                          pOutputDataRec->tmScrTmGeneric8,
                          hO_dtDtPersonPhoneStart,
                          hO_dtDtPersonPhoneStart_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtPersonPhoneEnd),
                          pOutputDataRec->tmScrTmGeneric9,
                          hO_dtDtPersonPhoneEnd,
                          hO_dtDtPersonPhoneEnd_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndPersonPhoneInvalid),
                          &hO_bIndPersonPhoneInvalid,
                          sizeof(hO_bIndPersonPhoneInvalid),
                          hO_bIndPersonPhoneInvalid_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndPersonPhonePrimary),
                          &hO_bIndPersonPhonePrimary,
                          sizeof(hO_bIndPersonPhonePrimary),
                          hO_bIndPersonPhonePrimary_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdPhoneType,
                          hO_szCdPhoneType,
                          3,
                          hO_szCdPhoneType_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->ulIdName),
                          &hO_ulIdName,
                          sizeof(hO_ulIdName),
                          hO_ulIdName_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndNameInvalid),
                          &hO_bIndNameInvalid,
                          sizeof(hO_bIndNameInvalid),
                          hO_bIndNameInvalid_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNmNameFirst,
                          hO_szNmNameFirst,
                          13,
                          hO_szNmNameFirst_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNmNameMiddle,
                          hO_szNmNameMiddle,
                          13,
                          hO_szNmNameMiddle_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szNmNameLast,
                          hO_szNmNameLast,
                          23,
                          hO_szNmNameLast_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToNumber(&(pOutputDataRec->bIndNamePrimary),
                          &hO_bIndNamePrimary,
                          sizeof(hO_bIndNamePrimary),
                          hO_bIndNamePrimary_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToString(pOutputDataRec->szCdNameSuffix,
                          hO_szCdNameSuffix,
                          3,
                          hO_szCdNameSuffix_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtNameStartDate),
                          pOutputDataRec->tmScrTmGeneric3,
                          hO_dtDtNameStartDate,
                          hO_dtDtNameStartDate_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

             uStatus=ARC_UTLHostToDateAndTime(&(pOutputDataRec->dtDtNameEndDate),
                          pOutputDataRec->tmScrTmGeneric4,
                          hO_dtDtNameEndDate,
                          hO_dtDtNameEndDate_i);
             if (uStatus != 0)
             {
                 return (uStatus);
             }

}


EXEC SQL
 CLOSE CSEC01D_CURSOR;


memcpy (pSQLCA, &previousSQLCA, sizeof(struct sqlca));
return (((struct sqlca *)pSQLCA)->sqlcode);
}

