import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * Excel to API Processor - Java 8 Compatible
 * Reads Excel files, generates API payloads based on templates, and makes automated API calls
 * 
 * Dependencies required (add to your pom.xml or download JARs):
 * - Apache POI (poi, poi-ooxml) - for Excel reading
 * - Jackson (jackson-databind, jackson-core) - for JSON processing
 * - Java 8+
 */
public class ExcelAPIProcessor {
    
    private static final ObjectMapper objectMapper = new ObjectMapper();
    
    private List<Map<String, Object>> excelData;
    private Map<String, Object> config;
    private List<APIResult> results;
    private PrintWriter logWriter;
    
    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Usage: java ExcelAPIProcessor <excel_file> [config_file]");
            System.out.println("Example: java ExcelAPIProcessor data.xlsx config.json");
            return;
        }
        
        String excelFile = args[0];
        String configFile = args.length > 1 ? args[1] : null;
        
        try {
            ExcelAPIProcessor processor = new ExcelAPIProcessor();
            processor.initialize(configFile);
            processor.processFile(excelFile);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public ExcelAPIProcessor() {
        this.excelData = new ArrayList<Map<String, Object>>();
        this.results = new ArrayList<APIResult>();
        this.config = createDefaultConfig();
    }
    
    public void initialize(String configFile) throws IOException {
        // Setup logging
        String logFileName = "api_processor_" + 
                getCurrentTimestamp() + ".log";
        this.logWriter = new PrintWriter(new FileWriter(logFileName));
        
        // Load configuration if provided
        if (configFile != null && new File(configFile).exists()) {
            loadConfig(configFile);
            log("Loaded configuration from: " + configFile);
        } else {
            log("Using default configuration");
            // Create sample config file
            createSampleConfigFile();
        }
    }
    
    private String getCurrentTimestamp() {
        // Java 8 compatible timestamp formatting
        return String.valueOf(System.currentTimeMillis());
    }
    
    private String getCurrentDateTime() {
        return new Date().toString();
    }
    
    @SuppressWarnings("unchecked")
    private Map<String, Object> createDefaultConfig() {
        Map<String, Object> config = new HashMap<String, Object>();
        
        // API Configuration
        Map<String, Object> apiConfig = new HashMap<String, Object>();
        apiConfig.put("url", "https://api.example.com/endpoint");
        apiConfig.put("method", "POST");
        
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");
        // headers.put("Authorization", "Bearer YOUR_TOKEN_HERE");
        apiConfig.put("headers", headers);
        apiConfig.put("timeout", 30000); // milliseconds for Java 8
        apiConfig.put("retryAttempts", 3);
        apiConfig.put("retryDelay", 1000); // milliseconds
        
        config.put("api", apiConfig);
        
        // Payload Template - customize based on your Excel columns
        Map<String, Object> payloadTemplate = new HashMap<String, Object>();
        payloadTemplate.put("legalActionsCreatedTo", "{idStage}");
        payloadTemplate.put("cdLegalActAction", "{cdLegalActAction}");
        payloadTemplate.put("cdLegalActActionSubType", "{cdLegalActActionSubType}");
        payloadTemplate.put("cdOrToCourtStatus", "{cdOrToCourtStatus}");
        payloadTemplate.put("cdLegalActOutcome", "{cdLegalActOutcome}");
        payloadTemplate.put("cdLegalActOutSub", "{cdLegalActOutSub}");
        payloadTemplate.put("txtLegalActComment", "{txtLegalActComment}");
        payloadTemplate.put("dtLegalActDataFiled", "{dtLegalActDataFiled}");
        payloadTemplate.put("dtLegalActOutcomeDt", "{dtLegalActOutcomeDt}");
        payloadTemplate.put("idLegalActDocsnCase", "{idLegalActDocsnCase}");
        payloadTemplate.put("dtScheduledCourtDate", "{dtScheduledCourtDate}");
        payloadTemplate.put("scheduledTime", "{scheduledTime}");
        
        config.put("payloadTemplate", payloadTemplate);
        
        // Settings
        Map<String, Object> settings = new HashMap<String, Object>();
        settings.put("delayBetweenCalls", 500); // milliseconds
        settings.put("skipEmptyRows", true);
        settings.put("handleNotAvailable", true);
        settings.put("notAvailableValues", Arrays.asList("Not available", "N/A", "", "(null)"));
        settings.put("batchSize", 50); // Process in batches
        
        config.put("settings", settings);
        
        return config;
    }
    
    private void createSampleConfigFile() {
        try {
            String configJson = objectMapper.writerWithDefaultPrettyPrinter()
                    .writeValueAsString(config);
            FileWriter writer = new FileWriter("sample_config.json");
            writer.write(configJson);
            writer.close();
            log("Created sample_config.json - please customize it with your API details");
        } catch (IOException e) {
            log("Error creating sample config: " + e.getMessage());
        }
    }
    
    @SuppressWarnings("unchecked")
    private void loadConfig(String configFile) throws IOException {
        try {
            this.config = objectMapper.readValue(new File(configFile), Map.class);
        } catch (IOException e) {
            throw new IOException("Failed to load config file: " + e.getMessage());
        }
    }
    
    public void processFile(String excelFile) throws IOException {
        log("Starting to process Excel file: " + excelFile);
        
        // Read Excel file
        readExcelFile(excelFile);
        
        if (excelData.isEmpty()) {
            log("No data found in Excel file");
            return;
        }
        
        log("Loaded " + excelData.size() + " rows from Excel");
        
        // Display preview
        displayDataPreview();
        
        // Generate and execute API calls
        executeAPIProcessing();
        
        // Generate reports
        generateReports();
        
        log("Processing completed. Check the generated files for results.");
        
        if (logWriter != null) {
            logWriter.close();
        }
    }
    
    private void readExcelFile(String filePath) throws IOException {
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook;
        
        if (filePath.endsWith(".xlsx")) {
            workbook = new XSSFWorkbook(fis);
        } else if (filePath.endsWith(".xls")) {
            workbook = new HSSFWorkbook(fis);
        } else {
            throw new IllegalArgumentException("Unsupported file format. Use .xlsx or .xls");
        }
        
        Sheet sheet = workbook.getSheetAt(0);
        Iterator<Row> rowIterator = sheet.iterator();
        
        // Get headers from first row
        List<String> headers = new ArrayList<String>();
        if (rowIterator.hasNext()) {
            Row headerRow = rowIterator.next();
            for (Cell cell : headerRow) {
                headers.add(getCellValueAsString(cell));
            }
        }
        
        // Process data rows
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            Map<String, Object> rowData = new HashMap<String, Object>();
            
            for (int i = 0; i < headers.size(); i++) {
                Cell cell = row.getCell(i);
                String value = getCellValueAsString(cell);
                rowData.put(headers.get(i), value);
            }
            
            // Skip empty rows if configured
            if (shouldSkipRow(rowData)) {
                continue;
            }
            
            excelData.add(rowData);
        }
        
        workbook.close();
        fis.close();
    }
    
    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        
        // Handle different POI versions - try modern enum first, then legacy constants
        try {
            // For POI 4.x and newer (using enum)
            switch (cell.getCellType()) {
                case STRING:
                    return cell.getStringCellValue();
                case NUMERIC:
                    if (DateUtil.isCellDateFormatted(cell)) {
                        return cell.getDateCellValue().toString();
                    } else {
                        double numValue = cell.getNumericCellValue();
                        if (numValue == Math.floor(numValue)) {
                            return String.valueOf((long) numValue);
                        } else {
                            return String.valueOf(numValue);
                        }
                    }
                case BOOLEAN:
                    return String.valueOf(cell.getBooleanCellValue());
                case FORMULA:
                    return cell.getCellFormula();
                case BLANK:
                    return "";
                default:
                    return "";
            }
        } catch (Exception e) {
            // Fallback for older POI versions (3.x) using legacy int constants
            try {
                int cellType = cell.getCellType();
                switch (cellType) {
                    case 1: // STRING
                        return cell.getStringCellValue();
                    case 0: // NUMERIC
                        if (DateUtil.isCellDateFormatted(cell)) {
                            return cell.getDateCellValue().toString();
                        } else {
                            double numValue = cell.getNumericCellValue();
                            if (numValue == Math.floor(numValue)) {
                                return String.valueOf((long) numValue);
                            } else {
                                return String.valueOf(numValue);
                            }
                        }
                    case 4: // BOOLEAN
                        return String.valueOf(cell.getBooleanCellValue());
                    case 2: // FORMULA
                        return cell.getCellFormula();
                    case 3: // BLANK
                        return "";
                    default:
                        return "";
                }
            } catch (Exception ex) {
                // Last resort - try to get string representation
                try {
                    return cell.toString();
                } catch (Exception finalEx) {
                    return "";
                }
            }
        }
    }
    
    @SuppressWarnings("unchecked")
    private boolean shouldSkipRow(Map<String, Object> rowData) {
        Map<String, Object> settings = (Map<String, Object>) config.get("settings");
        if (!(Boolean) settings.get("skipEmptyRows")) {
            return false;
        }
        
        // Java 8 compatible way to check if all values are empty
        for (Object value : rowData.values()) {
            if (value != null && !value.toString().trim().isEmpty()) {
                return false;
            }
        }
        return true;
    }
    
    private void displayDataPreview() {
        log("\n=== DATA PREVIEW ===");
        if (!excelData.isEmpty()) {
            log("Columns found: " + excelData.get(0).keySet());
            log("Sample data (first 3 rows):");
            
            for (int i = 0; i < Math.min(3, excelData.size()); i++) {
                log("Row " + (i + 1) + ": " + excelData.get(i));
            }
        }
        log("===================\n");
    }
    
    @SuppressWarnings("unchecked")
    private void executeAPIProcessing() {
        log("Starting API processing...");
        
        Map<String, Object> apiConfig = (Map<String, Object>) config.get("api");
        Map<String, Object> settings = (Map<String, Object>) config.get("settings");
        
        String apiUrl = (String) apiConfig.get("url");
        String method = (String) apiConfig.get("method");
        Map<String, String> headers = (Map<String, String>) apiConfig.get("headers");
        int delayMs = (Integer) settings.get("delayBetweenCalls");
        
        int successCount = 0;
        int errorCount = 0;
        
        for (int i = 0; i < excelData.size(); i++) {
            Map<String, Object> rowData = excelData.get(i);
            
            try {
                // Generate payload for this row
                String payload = generatePayload(rowData);
                log("Processing row " + (i + 1) + "/" + excelData.size());
                
                // Make API call
                APIResult result = makeAPICall(apiUrl, method, headers, payload, i);
                results.add(result);
                
                if (result.isSuccess()) {
                    successCount++;
                    log("✅ Row " + (i + 1) + ": Success");
                } else {
                    errorCount++;
                    log("❌ Row " + (i + 1) + ": Error - " + result.getErrorMessage());
                }
                
                // Delay between calls
                if (delayMs > 0 && i < excelData.size() - 1) {
                    Thread.sleep(delayMs);
                }
                
            } catch (Exception e) {
                errorCount++;
                APIResult errorResult = new APIResult(i, null, false, 
                        "Exception: " + e.getMessage(), null, null);
                results.add(errorResult);
                log("❌ Row " + (i + 1) + ": Exception - " + e.getMessage());
            }
        }
        
        log("\n🎉 API Processing completed!");
        log("Success: " + successCount + ", Errors: " + errorCount);
    }
    
    @SuppressWarnings("unchecked")
    private String generatePayload(Map<String, Object> rowData) throws Exception {
        Map<String, Object> template = (Map<String, Object>) config.get("payloadTemplate");
        Map<String, Object> payload = new HashMap<String, Object>();
        
        for (Map.Entry<String, Object> entry : template.entrySet()) {
            String key = entry.getKey();
            String valueTemplate = entry.getValue().toString();
            
            // Replace placeholders like {columnName} with actual values
            String processedValue = replacePlaceholders(valueTemplate, rowData);
            payload.put(key, processedValue);
        }
        
        return objectMapper.writeValueAsString(payload);
    }
    
    @SuppressWarnings("unchecked")
    private String replacePlaceholders(String template, Map<String, Object> rowData) {
        Map<String, Object> settings = (Map<String, Object>) config.get("settings");
        List<String> notAvailableValues = (List<String>) settings.get("notAvailableValues");
        
        Pattern pattern = Pattern.compile("\\{([^}]+)\\}");
        Matcher matcher = pattern.matcher(template);
        
        StringBuffer result = new StringBuffer();
        while (matcher.find()) {
            String columnName = matcher.group(1);
            Object value = rowData.get(columnName);
            
            String replacement = "";
            if (value != null) {
                String strValue = value.toString();
                // Handle "Not available" values
                if (notAvailableValues.contains(strValue)) {
                    replacement = "";
                } else {
                    replacement = strValue;
                }
            }
            
            matcher.appendReplacement(result, Matcher.quoteReplacement(replacement));
        }
        matcher.appendTail(result);
        
        return result.toString();
    }
    
    @SuppressWarnings("unchecked")
    private APIResult makeAPICall(String urlString, String method, Map<String, String> headers, 
                                  String payload, int rowIndex) throws Exception {
        
        Map<String, Object> apiConfig = (Map<String, Object>) config.get("api");
        int timeout = (Integer) apiConfig.get("timeout");
        
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        
        // Set timeout
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        
        // Set method
        connection.setRequestMethod(method);
        
        // Add headers
        for (Map.Entry<String, String> header : headers.entrySet()) {
            connection.setRequestProperty(header.getKey(), header.getValue());
        }
        
        // Enable output for POST/PUT/PATCH
        if ("POST".equals(method) || "PUT".equals(method) || "PATCH".equals(method)) {
            connection.setDoOutput(true);
            
            // Write payload
            OutputStream os = connection.getOutputStream();
            byte[] input = payload.getBytes("utf-8");
            os.write(input, 0, input.length);
            os.close();
        }
        
        // Get response
        int responseCode = connection.getResponseCode();
        boolean success = responseCode >= 200 && responseCode < 300;
        
        String responseBody = "";
        try {
            InputStream inputStream = success ? connection.getInputStream() : connection.getErrorStream();
            if (inputStream != null) {
                BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, "utf-8"));
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                responseBody = response.toString();
                br.close();
            }
        } catch (Exception e) {
            responseBody = "Error reading response: " + e.getMessage();
        }
        
        String errorMessage = success ? null : "HTTP " + responseCode;
        
        connection.disconnect();
        
        return new APIResult(rowIndex, payload, success, errorMessage, 
                responseCode, responseBody);
    }
    
    private void generateReports() throws IOException {
        String timestamp = getCurrentTimestamp();
        
        // Generate detailed results JSON
        String resultsFile = "api_results_" + timestamp + ".json";
        objectMapper.writerWithDefaultPrettyPrinter()
                .writeValue(new File(resultsFile), results);
        log("Detailed results saved to: " + resultsFile);
        
        // Generate summary CSV
        String summaryFile = "api_summary_" + timestamp + ".csv";
        generateSummaryCSV(summaryFile);
        log("Summary saved to: " + summaryFile);
        
        // Generate error report if there are errors
        List<APIResult> errors = new ArrayList<APIResult>();
        for (APIResult result : results) {
            if (!result.isSuccess()) {
                errors.add(result);
            }
        }
        
        if (!errors.isEmpty()) {
            String errorFile = "api_errors_" + timestamp + ".json";
            objectMapper.writerWithDefaultPrettyPrinter()
                    .writeValue(new File(errorFile), errors);
            log("Error details saved to: " + errorFile);
        }
    }
    
    private void generateSummaryCSV(String fileName) throws IOException {
        PrintWriter writer = new PrintWriter(new FileWriter(fileName));
        writer.println("Row,Status,HTTP_Code,Error_Message");
        
        for (APIResult result : results) {
            String errorMsg = result.getErrorMessage() != null ? 
                    result.getErrorMessage().replace(",", ";") : "";
            writer.printf("%d,%s,%s,%s%n",
                    result.getRowIndex() + 1,
                    result.isSuccess() ? "SUCCESS" : "ERROR",
                    result.getHttpStatusCode() != null ? result.getHttpStatusCode().toString() : "N/A",
                    errorMsg
            );
        }
        
        writer.close();
    }
    
    private void log(String message) {
        String logMessage = getCurrentDateTime() + " - " + message;
        System.out.println(logMessage);
        if (logWriter != null) {
            logWriter.println(logMessage);
            logWriter.flush();
        }
    }
    
    // API Result class to store call results
    public static class APIResult {
        private int rowIndex;
        private String payload;
        private boolean success;
        private String errorMessage;
        private Integer httpStatusCode;
        private String response;
        
        public APIResult(int rowIndex, String payload, boolean success, 
                        String errorMessage, Integer httpStatusCode, String response) {
            this.rowIndex = rowIndex;
            this.payload = payload;
            this.success = success;
            this.errorMessage = errorMessage;
            this.httpStatusCode = httpStatusCode;
            this.response = response;
        }
        
        // Getters
        public int getRowIndex() { return rowIndex; }
        public String getPayload() { return payload; }
        public boolean isSuccess() { return success; }
        public String getErrorMessage() { return errorMessage; }
        public Integer getHttpStatusCode() { return httpStatusCode; }
        public String getResponse() { return response; }
        
        // Setters for Jackson serialization
        public void setRowIndex(int rowIndex) { this.rowIndex = rowIndex; }
        public void setPayload(String payload) { this.payload = payload; }
        public void setSuccess(boolean success) { this.success = success; }
        public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }
        public void setHttpStatusCode(Integer httpStatusCode) { this.httpStatusCode = httpStatusCode; }
        public void setResponse(String response) { this.response = response; }
    }
}
